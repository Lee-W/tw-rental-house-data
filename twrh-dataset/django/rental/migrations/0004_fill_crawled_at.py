# Generated by Django 2.0.7 on 2018-07-28 09:05

from django.db import migrations
from django.db.models import Max
from django.core.paginator import Paginator
import logging

def fill_crawled_at(apps, schema_editor):
    # Correct crawled is max(house_ts.updated)
    PAGE_SIZE = 5000
    TRANSACTION_SIZE = 500
    PREPAND = ''
    HouseTS = apps.get_model('rental', 'HouseTS')
    House = apps.get_model('rental', 'House')

    logger = logging.getLogger(__name__)

    houses_queryset = HouseTS.objects.all()\
        .values('vendor', 'vendor_house_id')\
        .annotate(updated=Max('updated'))\
        .order_by('vendor', 'vendor_house_id')

    paginator = Paginator(houses_queryset, PAGE_SIZE)
    logger.info('{}Start to populate crawled_at, it may take a while...'.format(PREPAND))

    total_write = 0

    for page_num in paginator.page_range:
        houses = paginator.page(page_num)
        for house_ts in houses:
            try:
                house = House.objects.get(
                    vendor_id=house_ts['vendor'],
                    vendor_house_id=house_ts['vendor_house_id']
                )
                house.crawled_at = house_ts['updated']
                house.save()
                total_write += 1
            except House.DoesNotExist:
                logger.info('{}  House {}-{} not existed'.format(
                    PREPAND,
                    house_ts.vendor.name,
                    house_ts.vendor_house_id
                ))

            if total_write % 1000 == 0:
                logger.info('{}  Update {} rows'.format(PREPAND, total_write))

        logger.info('{}  Done, total {} rows'.format(PREPAND, total_write))

class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0003_add_crawled_at'),
    ]

    operations = [
        migrations.RunPython(fill_crawled_at, migrations.RunPython.noop)
    ]
